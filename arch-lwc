#!/usr/bin/env bash

# Create and run lightweight containers
#
# Copyright (C) 2021 Maddison Hellstrom <https://github.com/b0o>, MIT License.

set -euo pipefail
if [[ ${BASH_VERSINFO[0]} -ge 5 || (${BASH_VERSINFO[0]} -eq 4 && ${BASH_VERSINFO[1]} -ge 4) ]]; then
  shopt -s inherit_errexit
fi

function years_from() {
  local from="$1" to
  to="${2:-$(date +%Y)}"
  if [[ "$from" == "$to" ]]; then
    echo "$from"
  else
    echo "$from-$to"
  fi
}

declare -g base
declare -g prog
base="$(realpath -e "${BASH_SOURCE[0]}")"
prog="$(basename "$base")"

# Meta
declare -gr version="0.0.4"
declare -gr authors=("$(years_from 2021) Maddison Hellstrom <github.com/b0o>")
declare -gr repository="https://github.com/b0o/$prog"
declare -gr issues="https://github.com/b0o/$prog/issues"
declare -gr license="MIT"
declare -gr license_url="https://mit-license.org"
declare -gra deps=("pacstrap" "systemd-nspawn" "systemd-run")

# Defaults
declare -gra default_pkgs=("base" "pacman-contrib")
declare -gr default_user="root"
declare -gr default_groups="tty,wheel,video,input"

# Global options
declare -gi create_run=0
declare -ga bash_settings=("+x")
declare -g systemd_log_level="info"

# Global state
declare -g tmp=""
declare -g cur_cmd=""

function usage() {
  cat << EOF
Usage: $prog [OPT...] COMMAND

Create, manage, and run lightweight Arch Linux containers with pacstrap and systemd.

Options
  -h [COMMAND]    Display usage information.
  -v              Display $prog version and copyright information.
  -q              Output debug messages.

COMMANDs
  create   Create a new container.
  exec     Execute a command in a running container.
  help     Display usage information.
  run      Create and start a container.
  start    Start an existing container.
  status   Display container status.
  stop     Stop a running container.
  version  Display $prog version and copyright information.
EOF
}

function usage_help() {
  usage
}

function usage_all() {
  local cmds=(
    create exec run start
    status stop version
  )
  local c
  usage
  for c in "${cmds[@]}"; do
    cat << EOF

COMMAND $c
$("usage_$c" | sed 's/^/  /')
EOF
  done
}

function usage_version() {
  cat << EOF
$prog version $version
Repository: $repository
Issues:     $issues
License:    $license ($license_url)
Copyright:  ${authors[0]}
EOF
  if [[ ${#authors[@]} -gt 1 ]]; then
    printf '              %s\n' "${authors[@]:1}"
  fi
}

function _usage_create_run() {
  cat << EOF
Options
  -p PKG          Append package to list of packages to be installed. May be
                  specified more than once. (default: ${default_pkgs[*]})

  -P PKG          Like -p, but override default packages.

  -u USER         Name of target user inside the container. If the user doesn't
                  exist, it will created. to create inside container. Any
                  commands specified with -x or -c will run as this user from
                  the user's home directory. If not specified, the
                  $default_user user will be used.

  -g GRP[,GRP...] Add the user to these groups in addition to the default
                  groups. (default: $default_groups)

  -G GRP[,GRP...] Like -g, but override default groups. Use -G "" to prevent
                  adding the user to any groups.

  -T              Don't disable securetty (this will likely prevent $prog from
                  running the container and prevent you from obtaining a shell
                  in the container).

  -f SRC[:DST]    Copy the file SRC from the host machine to DST in the container.
                  If DST is omitted, it will be inferred as SRC's absolute path.

  -n NSPAWNARG    When running the container, pass NSPAWNARG as a command-line
                  argument to systemd-nspawn. May be specified more than once.
                  Arguments with values, such as for systemd-nspawn's -E /
                  --setenv option, should be passed either as a single -n with
                  no spaces (e.g. -n "--setenv=VAR=VAL") or as two sequential -n
                  arguments (e.g. -n "-E" -n "VAR=VAL").

                  See systemd-nspawn(1) for more information on systemd-nspawn
                  arguments. Note that certain systemd-nspawn arguments may conflict
                  with the behavior of $prog, such as --boot.

                  For example, -n "--bind=/etc".

                  For convenience, the following systemd-nspawn options have $prog aliases:
                    $prog opt    systemd-nspawn opt
                    -b ARG ${prog//?/ } --bind=ARG
                    -B ARG ${prog//?/ } --bind-ro=ARG
                    -e ARG ${prog//?/ } --setenv=ARG

  -x CMD          Run CMD inside the container as the target user after
                  preliminary setup is complete. CMD will be interpreted by bash
                  and can contain multiple statements separated by semicolons
                  and/or newlines.

                  Modifications to the container will persist, making -x useful
                  for doing any extra setup needed.

                  Note that CMD only runs during the container creation phase, not
                  when the container is run. For that, see -c.

  -X CMD          Like -x, but run CMD as the root user. -X CMDs are run before
                  -x CMDs.

  -c CMD          Run CMD inside the container when the container is run. CMD
                  will be interpreted by bash and can contain multiple
                  statements separated by semicolons and/or newlines.

                  Note that CMD will not run during the creation phase, only when
                  the container is run.

                  If specified multiple times, CMDs are run synchronously in
                  the order they are specified. All -c CMDs set with the create
                  command will be run before -c CMDs set with the start command.
EOF
  if [[ $1 == "run" ]]; then
    cat << EOF

                  If CMD is "-", any -c CMDs specified when the container was
                  created are overridden.
EOF
  fi
  cat << EOF

  -C CMD          Like -c, but run CMD as the root user root. -C CMDs are run before
                  -c CMDs.

EOF
}

function usage_create() {
  cat << EOF
Usage: $prog create [OPT...] CONTAINER

Create a new container at the path CONTAINER.
EOF
  _usage_create_run create
}

function usage_start() {
  cat << EOF
Usage: $prog start [OPT...] CONTAINER

Start an existing container at the path CONTAINER.

Options

  -u USER         Name of target user inside the container. Any commands
                  specified with -c will run as this user from the user's home
                  directory. If not specified, the user that the container was
                  created with or the $default_user user will be used.

  -n NSPAWNARG    Pass NSPAWNARG as a command-line argument to systemd-nspawn.
                  May be specified more than once.  Arguments with values, such
                  as for systemd-nspawn's -E / --setenv option, should be passed
                  either as a single -n with no spaces (e.g. -n "--setenv=VAR=VAL")
                  or as two sequential -n arguments (e.g. -n "-E" -n "VAR=VAL").

                  See systemd-nspawn(1) for more information on systemd-nspawn
                  arguments. Note that certain systemd-nspawn arguments may conflict
                  with the behavior of $prog, such as --boot.

                  For example, -n "--bind=/etc".

                  For convenience, the following systemd-nspawn options have $prog aliases:
                    $prog opt    systemd-nspawn opt
                    -b ARG ${prog//?/ } --bind=ARG
                    -B ARG ${prog//?/ } --bind-ro=ARG
                    -e ARG ${prog//?/ } --setenv=ARG

  -N NSPAWNARG    Like -n, but override any NSPAWNARGs specified during container creation.

  -c CMD          Run CMD inside the container. CMD will be interpreted by bash
                  and can contain multiple statements separated by semicolons
                  and/or newlines.

                  All -c CMDs that were specified during container creation will
                  be run before -c CMDs specified with the start command.

                  If specified multiple times, CMDs are run synchronously in
                  the order they are specified. All -c CMDs set with the create
                  command will be run before -c CMDs set with the start command.

                  If CMD is "-", any -c CMDs specified when the container was
                  created are overridden.

  -C CMD          Like -c, but run CMD as the root user root. -C CMDs are run before
                  -c CMDs.
EOF
}

function usage_run() {
  cat << EOF
Usage: $prog run [OPT...] CONTAINER

Create and run a new container at the path CONTAINER.
EOF
  _usage_create_run run
}

function usage_exec() {
  cat << EOF
Usage: $prog exec [OPT...] CONTAINER [CMD] [ARG...]

Run a command in a running container. If no CMD is specified, an interactive
shell is launched.

Options

  -u USER         Name of target user inside the container. Any commands
                  specified with -c will run as this user from the user's home
                  directory. If not specified, the user that the container was
                  created with or the $default_user user will be used.
EOF
}

function usage_stop() {
  cat << EOF
Usage: $prog stop CONTAINER

Stop a running container.
EOF
}

function usage_status() {
  cat << EOF
Usage: $prog status CONTAINER

Display container status.
EOF
}

function write_config() {
  local config="$1"
  {
    echo "# Generated by $prog on $(date)"
    sed -E "s/^\S*declare\s*(\S+\s+)?//; s/^\S*config_//"
  } > "$config"
}

function load_config() {
  local config="$1"
  sed "s/\S\+=/config_&/" "$config"
}

function cleanup() {
  if [[ -n "$tmp" && -d "$tmp" && "$(realpath -m "$tmp")" != "/" ]]; then
    rm --preserve-root --one-file-system -r "$tmp"
  fi
}

function check_deps() {
  local -i code=0
  local dep
  for dep in "${deps[@]}"; do
    command -v "$dep" 2> /dev/null >&2 || {
      echo "$prog: error: dependency not found: $dep" >&2
      code=1
    }
  done
  return $code
}

function container_stop() {
  local container="$1"
  if ! machinectl status "$container" &> /dev/null; then
    return 0
  fi
  echo "Stopping container" >&2
  systemd-run -M "$container" \
    /usr/bin/env bash -c "
      set ${bash_settings[*]}
      if systemctl is-active container-setup.service; then
        systemctl stop container-setup.service && exit 1
      fi
      if systemctl is-active container-start.service; then
        systemctl stop container-start.service && exit 1
      fi
      systemctl poweroff
      exit 1
    "
  echo "Waiting for container to exit" >&2
  while machinectl status "$container" &> /dev/null; do
    sleep 0.1
  done
}

function container_exec() {
  local systemd_run_args=()
  local -i dashdash=0
  local arg
  for arg in "$@"; do
    if [[ "$arg" == "--" ]]; then
      dashdash=1
      break
    fi
    systemd_run_args+=("$arg")
  done
  if [[ $dashdash -eq 0 ]]; then
    systemd_run_args=()
  else
    shift $((${#systemd_run_args[@]} + 1))
  fi
  local user="$1" container="$2"
  shift 2
  if [[ "$user" != "root" ]]; then
    systemd_run_args+=("--user")
  fi

  if ! machinectl status "$container_name" &> /dev/null; then
    echo "$prog: error: container not running: $container" >&2
    return 1
  fi

  systemd-run "${systemd_run_args[@]}" -M "${user}@${container}" \
    /usr/bin/env bash -c "set ${bash_settings[*]}; $*"
}

function container_shell() {
  local machinectl_shell_args=()
  local -i dashdash=0
  local arg
  for arg in "$@"; do
    if [[ "$arg" == "--" ]]; then
      dashdash=1
      break
    fi
    machinectl_shell_args+=("$arg")
  done
  if [[ $dashdash -eq 0 ]]; then
    machinectl_shell_args=()
  else
    shift $((${#machinectl_shell_args[@]} + 1))
  fi
  local user="$1" container="$2"
  shift 2

  if ! machinectl status "$container" &> /dev/null; then
    echo "$prog: error: container not running: $container" >&2
    return 1
  fi

  machinectl "${machinectl_shell_args[@]}" shell "${user}@${container}" \
    /usr/bin/env bash ${1:+-c} ${1:+"$*"}
}

function cmd_create() {
  local -a pkgs_base=("${default_pkgs[@]}")
  local -a pkgs=()
  local user="root"
  local groups_base="$default_groups"
  local groups=""
  local -i securetty=0
  local -a files=()
  local -a build_cmds=()
  local -a root_build_cmds=()
  local -a run_cmds=()
  local -a root_run_cmds=()
  local -a nspawn_args=()
  local -a nspawn_create_args=()

  local opt OPTARG
  local -i OPTIND
  while getopts "hp:P:u:g:G:Tf:n:b:B:e:x:X:c:C:" opt "$@"; do
    case "$opt" in
    h)
      # shellcheck disable=SC2119
      cmd_help
      return 0
      ;;
    p)
      pkgs+=("$OPTARG")
      ;;
    P)
      pkgs_base=()
      pkgs+=("$OPTARG")
      ;;
    u)
      user="$OPTARG"
      ;;
    g)
      groups+=",$OPTARG"
      ;;
    G)
      groups_base=""
      groups+=",$OPTARG"
      ;;
    T)
      securetty=1
      ;;
    f)
      local src dest
      src="$(cut -d':' -f1 <<< "$OPTARG")"
      dest="$(cut -sd':' -f2 <<< "$OPTARG")"
      dest="${dest:-$src}"
      if [[ -z "$src" ]]; then
        echo "$prog: error: invalid option -- -f $OPTARG" >&2
        return 1
      fi
      src="$(realpath -e "$src")"
      dest="/$(realpath -m --relative-to="/" "/$dest" | sed -E 's|^(\.\./)*||g; s|\.\.||')"
      files+=("$src" "$dest")
      ;;
    n)
      nspawn_args+=("$OPTARG")
      ;;
    b)
      nspawn_args+=("--bind=$OPTARG")
      ;;
    B)
      nspawn_args+=("--bind-ro=$OPTARG")
      ;;
    e)
      nspawn_args+=("--setenv=$OPTARG")
      ;;
    x)
      build_cmds+=("$OPTARG")
      ;;
    X)
      root_build_cmds+=("$OPTARG")
      ;;
    c)
      run_cmds+=("$OPTARG")
      ;;
    C)
      root_run_cmds+=("$OPTARG")
      ;;
    \?)
      return 1
      ;;
    esac
  done
  shift $((OPTIND - 1))

  if [[ $# -lt 1 ]]; then
    echo "$prog: error: expected CONTAINER" >&2
    return 1
  fi

  local container container_base container_name
  container_base="$(realpath -m "$1")"
  container="${container_base}/container"
  container_name="$(basename "$container_base")"
  shift

  if [[ $# -gt 1 ]]; then
    echo "$prog: error: unexpected argument(s): $*" >&2
    return 1
  fi

  pkgs=("${pkgs_base[@]}" "${pkgs[@]}")
  groups="${groups_base:+${groups_base}${groups:+,}}${groups}"

  if [[ ! -d "$container_base" && -e "$container_base" ]]; then
    echo "$prog: error: CONTAINER exists and is not an empty directory: $container_base" >&2
    return 1
  fi
  if [[ -d "$container_base" ]]; then
    if [[ -n "$(ls -A "$container_base")" ]]; then
      echo "$prog: error: CONTAINER is a non-empty directory: $container_base" >&2
      return 1
    fi
  else
    mkdir -p "$container"
  fi

  pacstrap -G "$container" "${pkgs[@]}"

  if [[ $securetty -eq 0 ]]; then
    echo "Remove securetty configuration" >&2
    rm "$container/etc/securetty" "$container/usr/share/factory/etc/securetty"
    sed -i 's|^\[options\]$|&\nNoExtract = /etc/securetty /usr/share/factory/etc/securetty|' \
      "$container/etc/pacman.conf"
  fi

  local -a files_tmp=()
  if [[ ${#files[@]} -gt 0 ]]; then
    mkdir "$tmp/copy"
    nspawn_create_args+=("--bind-ro=$tmp/copy")
    local -i i=0
    local src dest
    while ((i < ${#files[@]})); do
      src="${files[i]}"
      dest="$(realpath -m "$container/${files[$((i + 1))]}")"
      dest_tmp="$(realpath -m "$tmp/copy/${files[$((i + 1))]}")"
      files_tmp+=("$dest_tmp")
      i=$((i + 2))

      local -a cp_opts=()
      if [[ -d "$src" ]]; then
        cp_opts+=(-r)
      fi

      echo "Copy $src -> $dest" >&2
      mkdir -p "$(dirname "$dest_tmp")"
      cp "${cp_opts[@]}" "$src" "$dest_tmp"
    done
  fi

  if [[ ${#build_cmds[@]} -gt 0 ]]; then
    mkdir "$tmp/build_cmds"
    local cmd
    local -i i=1
    for cmd in "${build_cmds[@]}"; do
      local c="$tmp/build_cmds/$i"
      echo "Prepare build cmd $c" >&2
      {
        echo "set ${bash_settings[*]}"
        echo "$cmd"
      } > "$c"
      chmod a+rx "$c"
      i=$((i + 1))
      cat "$c" >&2
    done
  fi

  {
    declare -p version pkgs_base pkgs user \
      groups_base groups securetty files \
      build_cmds run_cmds root_run_cmds nspawn_args
  } | write_config "$container_base/config"

  {
    cat << EOF
      set ${bash_settings[@]} -euo pipefail
      function handle_exit() {
        systemctl disable container-setup.service
      }
      trap handle_exit EXIT
      if ! getent passwd "$user" >/dev/null 2>&1; then
        useradd -Ums /bin/bash "$user"
      fi
EOF
    if [[ -n "$groups" ]]; then
      echo "usermod -aG \"$groups\" \"$user\""
    fi
    if [[ ${#files_tmp[@]} -gt 0 ]]; then
      local f
      for f in "${files_tmp[@]}"; do
        echo "install -D \"$f\" \"/$(realpath -m --relative-base="$tmp/copy" "$f")\""
      done
    fi
    for i in $(seq 1 ${#build_cmds[@]}); do
      echo "echo \"build command $i\""
      echo "env -C /root bash /tmp/container/build_cmds/$i.sh"
    done
    echo "echo \"Setup complete\""
  } > "$tmp/setup.sh"

  {
    cat << EOF
[Unit]
Description=$prog initial setup
DefaultDependencies=no
SuccessAction=exit
FailureAction=exit
After=default.target

[Service]
Type=oneshot
ExecStart=/usr/bin/env bash /tmp/container/setup.sh
StandardOutput=journal+console
StandardError=journal+console

[Install]
WantedBy=default.target
EOF
  } > "$tmp/container-setup.service"

  mkdir -p "$container/etc/systemd/system/default.target.wants"
  ln -s "/etc/systemd/system/container-setup.service" "$container/etc/systemd/system/default.target.wants/container-setup.service"
  nspawn_create_args+=("--bind-ro=$tmp/container-setup.service:/etc/systemd/system/container-setup.service")

  systemd-nspawn -bM "$container_name" -D "$container" --bind-ro="$tmp:/tmp/container" \
    "${nspawn_create_args[@]}" \
    "${nspawn_args[@]}" \
    -- --log-level="$systemd_log_level"

  echo "Container $container_base created successfully." >&2

  if [[ $create_run -eq 1 ]]; then
    cmd_start "$container_base"
  fi
}

function cmd_start() {
  local user
  local -a run_cmds=()
  local -i run_cmds_override=0

  local -a root_run_cmds=()
  local -i root_run_cmds_override=0

  local -a nspawn_args=()
  local -i nspawn_args_override=0

  local opt OPTARG
  local -i OPTIND
  while getopts "hu:n:b:B:e:c:C:" opt "$@"; do
    case "$opt" in
    h)
      # shellcheck disable=SC2119
      cmd_help
      return 0
      ;;
    u)
      user="$OPTARG"
      ;;
    n)
      if [[ $OPTARG == "-" ]]; then
        nspawn_args_override=1
      else
        nspawn_args+=("$OPTARG")
      fi
      ;;
    b)
      nspawn_args+=("--bind=$OPTARG")
      ;;
    B)
      nspawn_args+=("--bind-ro=$OPTARG")
      ;;
    e)
      nspawn_args+=("--setenv=$OPTARG")
      ;;
    c)
      if [[ $OPTARG == "-" ]]; then
        run_cmds_override=1
      else
        run_cmds+=("$OPTARG")
      fi
      ;;
    C)
      if [[ $OPTARG == "-" ]]; then
        root_run_cmds_override=1
      else
        root_run_cmds+=("$OPTARG")
      fi
      ;;
    \?)
      return 1
      ;;
    esac
  done
  shift $((OPTIND - 1))

  if [[ $# -lt 1 ]]; then
    echo "$prog: error: expected CONTAINER" >&2
    return 1
  fi

  local container container_base container_name
  container_base="$(realpath -m "$1")"
  container="${container_base}/container"
  container_name="$(basename "$container_base")"
  shift

  if [[ $# -gt 1 ]]; then
    echo "$prog: error: unexpected argument(s): $*" >&2
    return 1
  fi

  if [[ ! -d "$container_base" || ! -e "$container_base/config" || ! -d "$container" ]]; then
    echo "$prog: error: CONTAINER is not a valid $prog container: $container_base" >&2
    return 1
  fi

  # shellcheck disable=SC2034
  local config_version config_user config_groups_base config_groups
  # shellcheck disable=SC2034
  local -a config_pkgs_base config_pkgs config_files config_build_cmds config_run_cmds config_root_run_cmds config_nspawn_args
  # shellcheck disable=SC2034
  local -i config_securetty

  # shellcheck disable=SC1090
  source <(load_config "$container_base/config")

  # if [[ "$config_version" != "$version" ]]; then
  #   # TODO: config migrations
  #   echo "$prog: warning: config version does not match $prog version: $config_version != $version" >&2
  # fi

  if [[ $run_cmds_override -eq 0 ]]; then
    run_cmds=("${config_run_cmds[@]}" "${run_cmds[@]}")
  fi
  if [[ $root_run_cmds_override -eq 0 ]]; then
    root_run_cmds=("${config_root_run_cmds[@]}" "${root_run_cmds[@]}")
  fi
  if [[ $nspawn_args_override -eq 0 ]]; then
    nspawn_args=("${config_nspawn_args[@]}" "${nspawn_args[@]}")
  fi
  user="${user:-${config_user:-${default_user}}}"

  {
    cat << EOF
      set ${bash_settings[@]} -euo pipefail
      function handle_exit() {
        c=\${1:-\$?}
        if [[ \$c -ne 0 ]]; then
          echo "start-fail" | tee /tmp/container/events
        fi
        exit \$c
      }
      trap handle_exit EXIT
      trap 'handle_exit 0' HUP

      systemctl disable container-start.service || true

      echo "start-done" | tee /tmp/container/events

      # keep process alive until we receive SIGHUP
      tail -f /dev/null
EOF
  } > "$tmp/start.sh"

  {
    cat << EOF
[Unit]
Description=$prog entrypoint
DefaultDependencies=no
SuccessAction=exit
FailureAction=exit
After=multi-user.target

[Service]
Type=simple
ExecStart=/usr/bin/env bash /tmp/container/start.sh
StandardOutput=journal+console
StandardError=journal+console
KillSignal=SIGHUP

[Install]
WantedBy=default.target
EOF
  } > "$tmp/container-start.service"

  mkdir -p "$container/etc/systemd/system/default.target.wants"
  ln -sf "/etc/systemd/system/container-start.service" "$container/etc/systemd/system/default.target.wants/container-start.service"
  mkfifo "$tmp/events"
  chmod a+w "$tmp/events"

  nspawn_start_args+=("--bind-ro=$tmp/container-start.service:/etc/systemd/system/container-start.service")

  local -a nspawn_cmd=(
    systemd-nspawn -bM "$container_name" -D "$container" "--bind-ro=$tmp:/tmp/container"
    "${nspawn_args[@]}" "${nspawn_start_args[@]}"
    -- "--log-level=$systemd_log_level"
  )

  if [[ $((${#root_run_cmds[@]} + ${#run_cmds[@]})) -eq 0 ]]; then
    exec "${nspawn_cmd[@]}"
  fi

  "${nspawn_cmd[@]}" &

  # shellcheck disable=SC2064
  trap "container_stop '$container_name'" RETURN

  while read -r event < "$tmp/events"; do
    echo "event: $event" >&2
    case "$event" in
    "start-done")
      break
      ;;
    "start-fail" | "cmd-fail")
      return 1
      ;;
    *)
      return 2
      ;;
    esac
  done

  local cmd
  local cur_user
  local -i i=0
  while ((i < ${#root_run_cmds[@]} + ${#run_cmds[@]})); do
    if ((i < ${#root_run_cmds[@]})); then
      cmd="${root_run_cmds[$i]}"
      cur_user="root"
    else
      cmd="${run_cmds[$((i - ${#root_run_cmds[@]}))]}"
      cur_user="$user"
    fi
    container_exec --pipe --wait -- "$cur_user" "$container_name" "$cmd"
    i=$((i + 1))
  done
}

function cmd_run() {
  create_run=1
  cmd_create "$@"
}

function cmd_stop() {
  local opt OPTARG
  local -i OPTIND
  while getopts "h" opt "$@"; do
    case "$opt" in
    h)
      # shellcheck disable=SC2119
      cmd_help
      return 0
      ;;
    \?)
      return 1
      ;;
    esac
  done
  shift $((OPTIND - 1))

  if [[ $# -lt 1 ]]; then
    echo "$prog: error: expected CONTAINER" >&2
    return 1
  fi

  local container container_base container_name
  container_base="$(realpath -m "$1")"
  container="${container_base}/container"
  container_name="$(basename "$container_base")"
  shift

  if [[ $# -gt 1 ]]; then
    echo "$prog: error: unexpected argument(s): $*" >&2
    return 1
  fi

  if [[ ! -d "$container_base" || ! -e "$container_base/config" || ! -d "$container" ]]; then
    echo "$prog: error: CONTAINER is not a valid $prog container: $container_base" >&2
    return 1
  fi

  if ! machinectl status "$container_name" &> /dev/null; then
    echo "$prog: error: container not running: $container_base" >&2
    return 1
  fi

  container_stop "$container_name"
}

function cmd_status() {
  local opt OPTARG
  local -i OPTIND
  while getopts "h" opt "$@"; do
    case "$opt" in
    h)
      # shellcheck disable=SC2119
      cmd_help
      return 0
      ;;
    \?)
      return 1
      ;;
    esac
  done
  shift $((OPTIND - 1))

  if [[ $# -lt 1 ]]; then
    echo "$prog: error: expected CONTAINER" >&2
    return 1
  fi

  local container container_base container_name
  container_base="$(realpath -m "$1")"
  container="${container_base}/container"
  container_name="$(basename "$container_base")"
  shift

  if [[ $# -gt 1 ]]; then
    echo "$prog: error: unexpected argument(s): $*" >&2
    return 1
  fi

  if [[ ! -d "$container_base" || ! -e "$container_base/config" || ! -d "$container" ]]; then
    echo "$prog: error: CONTAINER is not a valid $prog container: $container_base" >&2
    return 1
  fi

  if machinectl status "$container_name" &> /dev/null; then
    echo "running"
  else
    echo "stopped"
  fi
}

function cmd_exec() {
  local opt OPTARG
  local -i OPTIND
  while getopts "hu:" opt "$@"; do
    case "$opt" in
    h)
      # shellcheck disable=SC2119
      cmd_help
      return 0
      ;;
    u)
      user="$OPTARG"
      ;;
    \?)
      return 1
      ;;
    esac
  done
  shift $((OPTIND - 1))

  if [[ $# -lt 1 ]]; then
    echo "$prog: error: expected CONTAINER" >&2
    return 1
  fi

  local container container_base container_name
  container_base="$(realpath -m "$1")"
  container="${container_base}/container"
  container_name="$(basename "$container_base")"
  shift

  if [[ ! -d "$container_base" || ! -e "$container_base/config" || ! -d "$container" ]]; then
    echo "$prog: error: CONTAINER is not a valid $prog container: $container_base" >&2
    return 1
  fi

  # shellcheck disable=SC2034
  local config_version config_user config_groups_base config_groups
  # shellcheck disable=SC2034
  local -a config_pkgs_base config_pkgs config_files config_build_cmds config_run_cmds config_root_run_cmds config_nspawn_args
  # shellcheck disable=SC2034
  local -i config_securetty

  # shellcheck disable=SC1090
  source <(load_config "$container_base/config")

  local user="${user:-${config_user:-${default_user}}}"

  if [[ $# -eq 0 ]]; then
    container_shell "$user" "$container_name"
  else
    container_exec --pipe --wait -- "$user" "$container_name" "$@"
  fi
}

# shellcheck disable=SC2120
function cmd_help() {
  local cmd="${1:-${cur_cmd:-}}"
  if [[ "$cmd" == "help" ]]; then
    cmd=""
  fi
  if [[ -n "$cmd" ]]; then
    if [[ "$(type -t "usage_$cmd")" == "function" ]]; then
      "usage_$cmd"
      return 0
    fi
    echo "$prog: error: unknown CMD: $cmd" >&2
    return 1
  else
    usage
    return 0
  fi
}

function cmd_version() {
  usage_version
}

function main() {
  local cmd
  local opt OPTARG
  local -i OPTIND
  while getopts "hvd" opt "$@"; do
    case "$opt" in
    h)
      cmd="help"
      ;;
    v)
      usage_version
      return 0
      ;;
    d)
      systemd_log_level="debug"
      bash_settings+=("-x" "-v")
      ;;
    \?)
      return 1
      ;;
    esac
  done
  shift $((OPTIND - 1))

  set "${bash_settings[@]}"

  tmp="$(mktemp -td "$prog-XXXXX")"
  trap "cleanup" EXIT

  if [[ -z "${cmd:-}" && $# -gt 0 ]]; then
    cmd="$1"
    shift
  fi
  if [[ -z "${cmd:-}" ]]; then
    echo "$prog: error: expected CMD" >&2
    return 1
  fi

  if [[ "$(type -t "cmd_$cmd")" != "function" ]]; then
    echo "$prog: error: unknown CMD: $cmd" >&2
    return 1
  fi

  check_deps

  cur_cmd="$cmd"
  "cmd_$cmd" "$@"
}

main "$@"
